<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:AnimatedGifDrawerBack">
            <summary>
            This class handles the animations for the Player, or the Pokemon with its back facing the camera.
            </summary>
        </member>
        <member name="M:AnimatedGifDrawerBack.OnGUI">
            <summary>
            OnGUI method called to draw the gif image brought in from the byte array
            </summary>
        </member>
        <member name="M:AnimatedGifDrawerBack.WaitForRequest(UnityEngine.GameObject,System.String)">
            <summary>
            This checks the url for being a proper url with the gif image.
            </summary>
            <param name="go"> a game object </param>
            <param name="url"> the url that the gif image is sotred in</param>
            <returns></returns>
        </member>
        <member name="M:AnimatedGifDrawerBack.ByteArrayToImage(System.Byte[])">
            <summary>
            This converts a byte array to a System.Drawing.Image type
            </summary>
            <param name="byteArrayIn"> the byte array to be converted</param>
            <returns></returns>
        </member>
        <member name="M:AnimatedGifDrawerBack.byteArrayToBitMap(System.Byte[])">
            <summary>
            This method converts the read in byte arry to a System.Drawing.Bitmap
            </summary>
            <param name="data"> the byte array to be convereted</param>
            <returns></returns>
        </member>
        <member name="M:AnimatedGifDrawerBack.loadImage">
            <summary>
            This handles loading all fo the data from the given url and converts it into a readable image type and then allows the OnGUI function to draw the gif
            </summary>
        </member>
        <member name="T:AttackDamageCalc">
            <summary>
            This class is created to take the damage done by each attack when a button is pressed. It is meant to work on every single attack.
            </summary>
        </member>
        <member name="M:AttackDamageCalc.getPokemonTypes">
            <summary>
            Gets the pokemon Types for the Type modifier in the damage calculation
            </summary>
        </member>
        <member name="M:AttackDamageCalc.isPlayer_Button(System.Boolean)">
            <summary>
            Button method, makes sure that if the button was clicked, the isPlayer boolean is true
            <param name="p">a boolean to set the isPlayer boolean</param>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.get_attack_name(System.Int32)">
            <summary>
            Button method, tells this script which attack has been called based off an integer between 1 and 4
            <param name="index">the index of the current attack in the list of attacks</param>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.calculateAttackEffect">
            <summary>
            This method takes the name of the attack and then passes it into other methods in the Attack_Switch_Case to get the effect
            of the attack on the enemy or player pokemon, if it is a status type of attack or one that deals damage or stuns...ect.
            </summary>
        </member>
        <member name="M:AttackDamageCalc.calculateDamage(System.String)">
            <summary>
            This method calculates the damage that each attack will do based off the serebii.net damage formula, this does not take into effect the different modifiers or attack calculations each specific move has
            <param name="name">takes in the name of the current attack being passed in</param>
            <returns>the final basic damage based on all modifiers and multipliers</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.modifier(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Sets the multiplier Base Power * STAB * Type modifier * Critical * other * randomNum(.85,1)
            <param name="index">the index of the move in the attack list</param>
            <param name="attackType">the attack type of the move being passed in</param>
            <param name="isPlayer">a boolean to see if the player is using the move or the enemy</param>
            <param name="name">the name of the move being passed in</param>
            <returns>the final value of all the modifiers</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.levelModifier(System.Boolean)">
            <summary>
            Sets the level multiplier (2 * level / 5) + 2
            <param name="isPlayer">a boolean to see if the player is using the move or the enemy</param>
            <returns>a float value of the level modifier</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.set_attack_and_def(System.Int32,System.Boolean,System.String)">
            <summary>
             Sets the player and enemy attack and defense based on the attack category (physical, status, special)
            <param name="attack_index">the index of the move in the list of attacks</param>
            <param name="isPlayer">a boolean to see if the player is using the move or the enemy</param>
            <param name="attackCat">the category of the attack move, either special, status, or physical</param>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.baseAttackPower(System.Int32)">
            <summary>
            Takes the index or location of the pokemon in the attack list so we can fetch the base attack power for that attack
            <param name="index">the index of the move in the list of attacks</param>
            <returns> the base damage of the move</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.isStab(System.String,System.Boolean)">
            <summary>
             checks if the current attack is a STAB type attack or same type attack
            <param name="attackType">the attack type of the move being passed in</param>
            <param name="isPlayer">a boolean to see if the player is using the move or the enemy</param>
            <returns>a boolean that is true if the move is a stab type move or not</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.getAttackListIndex(System.String)">
            <summary>
            Gets the index of the pokemon in the attack list so we can use this index later rather than having to get it multiple times
            <param name="name">the name of the move being passed in</param>
            <returns>the index of the move being passed in, within the attack list</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.getTypeMultiplier(System.String,System.Boolean)">
            <summary>
             Returns the type modifier for the attack based off of the pokemon's damange multiplier for that specific type of attack 
            <param name="attackType">the attack type or the mvoe being passed in</param>
            <param name="isPlayer">a boolean to see if the player is using the move or the enemy</param>
            <returns>the multiplier as a float</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.fetchAttackTypeIndex(System.String,System.Int32)">
            <summary>
            Uses the index to get the type multiplier from the master list in the damage multiplier class
            <param name="attackType">the type of the attack</param>
            <param name="index">the index of the attack move in the attack list</param>
            <returns>the modifier of the attack move based off its attack type</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.implimentDamage(System.Single,System.Boolean)">
            <summary>
            Impliments the damage done by the attack and updates the text and health bars
            <param name="damage">the amount of damage to eb implimented</param>
            <param name="isPlayer">boolean to check if the player is using a move or the enemy</param>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.moveHitProbability(System.Int32)">
            <summary>
            This method takes in the acuracy of the pokemon (always divisible by 5) and calculates if it hits or not and returns a boolean
            value based on if it hits
            <param name="accuracy">the accuracy of the move being passed in</param>
            <returns>true if the move hit, false if it missed</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.isCrit(System.Int32)">
             <summary>
             Calculates the 1/16 chance every move has for getting a critical strike
             <param name="chance">the chance probability either (1/8) or (1/16)</param>
             <returns>true if the move crit, false if it did not</returns>
            </summary>
        </member>
        <member name="M:AttackDamageCalc.critChance(System.String)">
            <summary>
            Handles the cases where the move has a high probability of getting a critical hit (1/8) versus (1/16)
            </summary>
            <param name="name"> the name of the attack</param>
            <returns>the crit chance of the move either (1/8) or (1/16)</returns>
        </member>
        <member name="M:Attack_Switch_Case.stunProbability(System.Int32)">
            <summary>
            Takes in the probability of getting a stun for a move out of ten, then makes a list of that many unique random numbers
            if the guess is any of those unique random numbers the method returns true, otherwise the attack did not stun the 
            enemy pokemon
            </summary>
        </member>
        <member name="M:Attack_Switch_Case.multiAttack(System.Int32,System.String)">
            <summary>
            this method takes in the amount of times the attack gets calculated so that the total damage accounts for 
            each attack as its own sperate attack rather than multiplying by the number
            </summary>
        </member>
        <member name="M:GUIScript.names">
            <summary>
            Gets the Pokemon's name and displays it on the GUI
            </summary>
        </member>
        <member name="M:GUIScript.level">
            <summary>
            Gets the Pokemon's level and displays it on the GUI
            </summary>
        </member>
        <member name="M:GUIScript.health">
            <summary>
            Gets the Pokemon's health and displays it on the GUI
            </summary>
        </member>
        <member name="M:GUIScript.generatePokemonStats">
            <summary>
            Function to generate all the attack stats
            </summary>
        </member>
        <member name="M:GUIScript.attackNames">
            <summary>
            Gets the attack names from the randomly generated attack list
            </summary>
        </member>
        <member name="T:GenerateAttacks">
            <summary>
            This class generated the attacks for the player, as shown in th GUI. It fetches the attack data for the pokemon 
            in the PokemonAttacks script and then picks 4 attacks from the list of attacks the specified pokemon can use and
            sends the data to the GUI so the user can see what attacks he/she can has at his/her disposal.
            </summary>
        </member>
        <member name="M:GenerateAttacks.checkInitalGen">
            <summary>
            Checks to make sure that the inital Gen of the pokemon attack list went through, if not it calls the
            generation of the attacks again.
            </summary>
        </member>
        <member name="M:GenerateAttacks.debugList">
            <summary>
            A simple debug function that debugs all the attacks each pokemon can use
            </summary>
        </member>
        <member name="M:GenerateAttacks.PlayerPokemonGen">
            <summary>
            Generates the random list of player attacks
            </summary>
        </member>
        <member name="M:GenerateAttacks.EnemyPlayerPokemonGen">
            <summary>
            Generates the random list of enemy attacks
            </summary>
        </member>
        <member name="M:GenerateAttacks.generateRandomList(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Generates the random list of attacks based on the input of the list variable
            </summary>
        </member>
        <member name="M:GenerateAttacks.checkList(System.Collections.Generic.List{attackIndex})">
            <summary>
            Simple check of the generated attack list.
            </summary>
        </member>
        <member name="M:GenerateAttacks.returnPlayerAttacks">
            <summary>
            the moves is always 4, 
            </summary>
        </member>
        <member name="T:PokemonLibrary">
            <summary>
            Pokemon Library for Generation 1 
            </summary>
        </member>
        <member name="M:PokemonLibrary.libraryBaseStats">
            <summary>
            This creates a list of all the pokemon withe their id, name, hp, attack, defense, speed, special, if they can 
            eveolve and their 2 types, for non dual type pokemon the second attribute is empty so when we check for that
            during battle calculations we can see if they are dual type or single type and their weaknesses
            </summary>
        </member>
    </members>
</doc>
